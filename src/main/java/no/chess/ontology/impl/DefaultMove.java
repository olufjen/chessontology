package no.chess.ontology.impl;

import no.chess.ontology.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultMove <br>
 * @version generated on Tue Oct 09 13:17:05 CEST 2018 by olj
 */
public class DefaultMove extends WrappedIndividualImpl implements Move {

    public DefaultMove(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://oljontologies.org/games/chess#makeMove
     */
     
    public Collection<? extends WrappedIndividual> getMakeMove() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_MAKEMOVE,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasMakeMove() {
	   return !getMakeMove().isEmpty();
    }

    public void addMakeMove(WrappedIndividual newMakeMove) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_MAKEMOVE,
                                       newMakeMove);
    }

    public void removeMakeMove(WrappedIndividual oldMakeMove) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_MAKEMOVE,
                                          oldMakeMove);
    }


    /* ***************************************************
     * Object Property http://oljontologies.org/games/chess#moveFrom
     */
     
    public Collection<? extends ChessPosition> getMoveFrom() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_MOVEFROM,
                                               DefaultChessPosition.class);
    }

    public boolean hasMoveFrom() {
	   return !getMoveFrom().isEmpty();
    }

    public void addMoveFrom(ChessPosition newMoveFrom) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_MOVEFROM,
                                       newMoveFrom);
    }

    public void removeMoveFrom(ChessPosition oldMoveFrom) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_MOVEFROM,
                                          oldMoveFrom);
    }


    /* ***************************************************
     * Object Property http://oljontologies.org/games/chess#moveTo
     */
     
    public Collection<? extends ChessPosition> getMoveTo() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_MOVETO,
                                               DefaultChessPosition.class);
    }

    public boolean hasMoveTo() {
	   return !getMoveTo().isEmpty();
    }

    public void addMoveTo(ChessPosition newMoveTo) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_MOVETO,
                                       newMoveTo);
    }

    public void removeMoveTo(ChessPosition oldMoveTo) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_MOVETO,
                                          oldMoveTo);
    }


    /* ***************************************************
     * Object Property http://oljontologies.org/games/chess#movementOf
     */
     
    public Collection<? extends ChessPiece> getMovementOf() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_MOVEMENTOF,
                                               DefaultChessPiece.class);
    }

    public boolean hasMovementOf() {
	   return !getMovementOf().isEmpty();
    }

    public void addMovementOf(ChessPiece newMovementOf) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_MOVEMENTOF,
                                       newMovementOf);
    }

    public void removeMovementOf(ChessPiece oldMovementOf) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_MOVEMENTOF,
                                          oldMovementOf);
    }


    /* ***************************************************
     * Object Property http://www.co-ode.org/ontologies/ont.owl#isPartOf
     */
     
    public Collection<? extends WrappedIndividual> getIsPartOf() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISPARTOF,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIsPartOf() {
	   return !getIsPartOf().isEmpty();
    }

    public void addIsPartOf(WrappedIndividual newIsPartOf) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISPARTOF,
                                       newIsPartOf);
    }

    public void removeIsPartOf(WrappedIndividual oldIsPartOf) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISPARTOF,
                                          oldIsPartOf);
    }


    /* ***************************************************
     * Object Property http://www.co-ode.org/ontologies/ont.owl#opponents
     */
     
    public Collection<? extends WrappedIndividual> getOpponents() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_OPPONENTS,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasOpponents() {
	   return !getOpponents().isEmpty();
    }

    public void addOpponents(WrappedIndividual newOpponents) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_OPPONENTS,
                                       newOpponents);
    }

    public void removeOpponents(WrappedIndividual oldOpponents) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_OPPONENTS,
                                          oldOpponents);
    }


    /* ***************************************************
     * Object Property http://www.co-ode.org/ontologies/ont.owl#plays
     */
     
    public Collection<? extends WrappedIndividual> getPlays() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_PLAYS,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasPlays() {
	   return !getPlays().isEmpty();
    }

    public void addPlays(WrappedIndividual newPlays) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_PLAYS,
                                       newPlays);
    }

    public void removePlays(WrappedIndividual oldPlays) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_PLAYS,
                                          oldPlays);
    }


    /* ***************************************************
     * Data Property http://www.co-ode.org/ontologies/ont.owl#hasName
     */
     
    public Collection<? extends Object> getHasName() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASNAME, Object.class);
    }

    public boolean hasHasName() {
		return !getHasName().isEmpty();
    }

    public void addHasName(Object newHasName) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASNAME, newHasName);
    }

    public void removeHasName(Object oldHasName) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASNAME, oldHasName);
    }


    /* ***************************************************
     * Data Property http://www.co-ode.org/ontologies/ont.owl#hasValue
     */
     
    public Collection<? extends Integer> getHasValue() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASVALUE, Integer.class);
    }

    public boolean hasHasValue() {
		return !getHasValue().isEmpty();
    }

    public void addHasValue(Integer newHasValue) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASVALUE, newHasValue);
    }

    public void removeHasValue(Integer oldHasValue) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASVALUE, oldHasValue);
    }


}
