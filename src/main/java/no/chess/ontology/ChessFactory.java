package no.chess.ontology;

import no.chess.ontology.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: ChessFactory<br>
 * @version generated on Mon Jul 23 13:24:46 CEST 2018 by olj
 */
public class ChessFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public ChessFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public ChessFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://oljontologies.org/games/chess#BlackGamePosition
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#BlackGamePosition", BlackGamePosition.class, DefaultBlackGamePosition.class);
    }

    /**
     * Creates an instance of type BlackGamePosition.  Modifies the underlying ontology.
     */
    public BlackGamePosition createBlackGamePosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLACKGAMEPOSITION, DefaultBlackGamePosition.class);
    }

    /**
     * Gets an instance of type BlackGamePosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BlackGamePosition getBlackGamePosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLACKGAMEPOSITION, DefaultBlackGamePosition.class);
    }

    /**
     * Gets all instances of BlackGamePosition from the ontology.
     */
    public Collection<? extends BlackGamePosition> getAllBlackGamePositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLACKGAMEPOSITION, DefaultBlackGamePosition.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#BlackPlayer
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#BlackPlayer", BlackPlayer.class, DefaultBlackPlayer.class);
    }

    /**
     * Creates an instance of type BlackPlayer.  Modifies the underlying ontology.
     */
    public BlackPlayer createBlackPlayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLACKPLAYER, DefaultBlackPlayer.class);
    }

    /**
     * Gets an instance of type BlackPlayer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BlackPlayer getBlackPlayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLACKPLAYER, DefaultBlackPlayer.class);
    }

    /**
     * Gets all instances of BlackPlayer from the ontology.
     */
    public Collection<? extends BlackPlayer> getAllBlackPlayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLACKPLAYER, DefaultBlackPlayer.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#ChessPiece
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#ChessPiece", ChessPiece.class, DefaultChessPiece.class);
    }

    /**
     * Creates an instance of type ChessPiece.  Modifies the underlying ontology.
     */
    public ChessPiece createChessPiece(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHESSPIECE, DefaultChessPiece.class);
    }

    /**
     * Gets an instance of type ChessPiece with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ChessPiece getChessPiece(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHESSPIECE, DefaultChessPiece.class);
    }

    /**
     * Gets all instances of ChessPiece from the ontology.
     */
    public Collection<? extends ChessPiece> getAllChessPieceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHESSPIECE, DefaultChessPiece.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#ChessPosition
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#ChessPosition", ChessPosition.class, DefaultChessPosition.class);
    }

    /**
     * Creates an instance of type ChessPosition.  Modifies the underlying ontology.
     */
    public ChessPosition createChessPosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHESSPOSITION, DefaultChessPosition.class);
    }

    /**
     * Gets an instance of type ChessPosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ChessPosition getChessPosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHESSPOSITION, DefaultChessPosition.class);
    }

    /**
     * Gets all instances of ChessPosition from the ontology.
     */
    public Collection<? extends ChessPosition> getAllChessPositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHESSPOSITION, DefaultChessPosition.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#GamePiece
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#GamePiece", GamePiece.class, DefaultGamePiece.class);
    }

    /**
     * Creates an instance of type GamePiece.  Modifies the underlying ontology.
     */
    public GamePiece createGamePiece(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GAMEPIECE, DefaultGamePiece.class);
    }

    /**
     * Gets an instance of type GamePiece with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GamePiece getGamePiece(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GAMEPIECE, DefaultGamePiece.class);
    }

    /**
     * Gets all instances of GamePiece from the ontology.
     */
    public Collection<? extends GamePiece> getAllGamePieceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GAMEPIECE, DefaultGamePiece.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#GamePosition
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#GamePosition", GamePosition.class, DefaultGamePosition.class);
    }

    /**
     * Creates an instance of type GamePosition.  Modifies the underlying ontology.
     */
    public GamePosition createGamePosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GAMEPOSITION, DefaultGamePosition.class);
    }

    /**
     * Gets an instance of type GamePosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GamePosition getGamePosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GAMEPOSITION, DefaultGamePosition.class);
    }

    /**
     * Gets all instances of GamePosition from the ontology.
     */
    public Collection<? extends GamePosition> getAllGamePositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GAMEPOSITION, DefaultGamePosition.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#Occupant
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#Occupant", Occupant.class, DefaultOccupant.class);
    }

    /**
     * Creates an instance of type Occupant.  Modifies the underlying ontology.
     */
    public Occupant createOccupant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OCCUPANT, DefaultOccupant.class);
    }

    /**
     * Gets an instance of type Occupant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Occupant getOccupant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OCCUPANT, DefaultOccupant.class);
    }

    /**
     * Gets all instances of Occupant from the ontology.
     */
    public Collection<? extends Occupant> getAllOccupantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OCCUPANT, DefaultOccupant.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#Offline
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#Offline", Offline.class, DefaultOffline.class);
    }

    /**
     * Creates an instance of type Offline.  Modifies the underlying ontology.
     */
    public Offline createOffline(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OFFLINE, DefaultOffline.class);
    }

    /**
     * Gets an instance of type Offline with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Offline getOffline(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OFFLINE, DefaultOffline.class);
    }

    /**
     * Gets all instances of Offline from the ontology.
     */
    public Collection<? extends Offline> getAllOfflineInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OFFLINE, DefaultOffline.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#Taken
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#Taken", Taken.class, DefaultTaken.class);
    }

    /**
     * Creates an instance of type Taken.  Modifies the underlying ontology.
     */
    public Taken createTaken(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TAKEN, DefaultTaken.class);
    }

    /**
     * Gets an instance of type Taken with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Taken getTaken(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TAKEN, DefaultTaken.class);
    }

    /**
     * Gets all instances of Taken from the ontology.
     */
    public Collection<? extends Taken> getAllTakenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TAKEN, DefaultTaken.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#Vacant
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#Vacant", Vacant.class, DefaultVacant.class);
    }

    /**
     * Creates an instance of type Vacant.  Modifies the underlying ontology.
     */
    public Vacant createVacant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VACANT, DefaultVacant.class);
    }

    /**
     * Gets an instance of type Vacant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Vacant getVacant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VACANT, DefaultVacant.class);
    }

    /**
     * Gets all instances of Vacant from the ontology.
     */
    public Collection<? extends Vacant> getAllVacantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VACANT, DefaultVacant.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#WhiteGamePosition
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#WhiteGamePosition", WhiteGamePosition.class, DefaultWhiteGamePosition.class);
    }

    /**
     * Creates an instance of type WhiteGamePosition.  Modifies the underlying ontology.
     */
    public WhiteGamePosition createWhiteGamePosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WHITEGAMEPOSITION, DefaultWhiteGamePosition.class);
    }

    /**
     * Gets an instance of type WhiteGamePosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WhiteGamePosition getWhiteGamePosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WHITEGAMEPOSITION, DefaultWhiteGamePosition.class);
    }

    /**
     * Gets all instances of WhiteGamePosition from the ontology.
     */
    public Collection<? extends WhiteGamePosition> getAllWhiteGamePositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WHITEGAMEPOSITION, DefaultWhiteGamePosition.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#WhitePlayer
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#WhitePlayer", WhitePlayer.class, DefaultWhitePlayer.class);
    }

    /**
     * Creates an instance of type WhitePlayer.  Modifies the underlying ontology.
     */
    public WhitePlayer createWhitePlayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WHITEPLAYER, DefaultWhitePlayer.class);
    }

    /**
     * Gets an instance of type WhitePlayer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WhitePlayer getWhitePlayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WHITEPLAYER, DefaultWhitePlayer.class);
    }

    /**
     * Gets all instances of WhitePlayer from the ontology.
     */
    public Collection<? extends WhitePlayer> getAllWhitePlayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WHITEPLAYER, DefaultWhitePlayer.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#BlackBoardPosition
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#BlackBoardPosition", BlackBoardPosition.class, DefaultBlackBoardPosition.class);
    }

    /**
     * Creates an instance of type BlackBoardPosition.  Modifies the underlying ontology.
     */
    public BlackBoardPosition createBlackBoardPosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLACKBOARDPOSITION, DefaultBlackBoardPosition.class);
    }

    /**
     * Gets an instance of type BlackBoardPosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BlackBoardPosition getBlackBoardPosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLACKBOARDPOSITION, DefaultBlackBoardPosition.class);
    }

    /**
     * Gets all instances of BlackBoardPosition from the ontology.
     */
    public Collection<? extends BlackBoardPosition> getAllBlackBoardPositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLACKBOARDPOSITION, DefaultBlackBoardPosition.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#BlackPiece
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#BlackPiece", BlackPiece.class, DefaultBlackPiece.class);
    }

    /**
     * Creates an instance of type BlackPiece.  Modifies the underlying ontology.
     */
    public BlackPiece createBlackPiece(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLACKPIECE, DefaultBlackPiece.class);
    }

    /**
     * Gets an instance of type BlackPiece with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BlackPiece getBlackPiece(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLACKPIECE, DefaultBlackPiece.class);
    }

    /**
     * Gets all instances of BlackPiece from the ontology.
     */
    public Collection<? extends BlackPiece> getAllBlackPieceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLACKPIECE, DefaultBlackPiece.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#BoardPosition
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#BoardPosition", BoardPosition.class, DefaultBoardPosition.class);
    }

    /**
     * Creates an instance of type BoardPosition.  Modifies the underlying ontology.
     */
    public BoardPosition createBoardPosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOARDPOSITION, DefaultBoardPosition.class);
    }

    /**
     * Gets an instance of type BoardPosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BoardPosition getBoardPosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOARDPOSITION, DefaultBoardPosition.class);
    }

    /**
     * Gets all instances of BoardPosition from the ontology.
     */
    public Collection<? extends BoardPosition> getAllBoardPositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOARDPOSITION, DefaultBoardPosition.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#ChessGame
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#ChessGame", ChessGame.class, DefaultChessGame.class);
    }

    /**
     * Creates an instance of type ChessGame.  Modifies the underlying ontology.
     */
    public ChessGame createChessGame(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHESSGAME, DefaultChessGame.class);
    }

    /**
     * Gets an instance of type ChessGame with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ChessGame getChessGame(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHESSGAME, DefaultChessGame.class);
    }

    /**
     * Gets all instances of ChessGame from the ontology.
     */
    public Collection<? extends ChessGame> getAllChessGameInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHESSGAME, DefaultChessGame.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#Chessboard
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#Chessboard", Chessboard.class, DefaultChessboard.class);
    }

    /**
     * Creates an instance of type Chessboard.  Modifies the underlying ontology.
     */
    public Chessboard createChessboard(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHESSBOARD, DefaultChessboard.class);
    }

    /**
     * Gets an instance of type Chessboard with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Chessboard getChessboard(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHESSBOARD, DefaultChessboard.class);
    }

    /**
     * Gets all instances of Chessboard from the ontology.
     */
    public Collection<? extends Chessboard> getAllChessboardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHESSBOARD, DefaultChessboard.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#Move
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#Move", Move.class, DefaultMove.class);
    }

    /**
     * Creates an instance of type Move.  Modifies the underlying ontology.
     */
    public Move createMove(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOVE, DefaultMove.class);
    }

    /**
     * Gets an instance of type Move with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Move getMove(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOVE, DefaultMove.class);
    }

    /**
     * Gets all instances of Move from the ontology.
     */
    public Collection<? extends Move> getAllMoveInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOVE, DefaultMove.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#Piece
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#Piece", Piece.class, DefaultPiece.class);
    }

    /**
     * Creates an instance of type Piece.  Modifies the underlying ontology.
     */
    public Piece createPiece(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PIECE, DefaultPiece.class);
    }

    /**
     * Gets an instance of type Piece with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Piece getPiece(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PIECE, DefaultPiece.class);
    }

    /**
     * Gets all instances of Piece from the ontology.
     */
    public Collection<? extends Piece> getAllPieceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PIECE, DefaultPiece.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#Player
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#Player", Player.class, DefaultPlayer.class);
    }

    /**
     * Creates an instance of type Player.  Modifies the underlying ontology.
     */
    public Player createPlayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLAYER, DefaultPlayer.class);
    }

    /**
     * Gets an instance of type Player with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Player getPlayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLAYER, DefaultPlayer.class);
    }

    /**
     * Gets all instances of Player from the ontology.
     */
    public Collection<? extends Player> getAllPlayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLAYER, DefaultPlayer.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#WhiteBoardPosition
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#WhiteBoardPosition", WhiteBoardPosition.class, DefaultWhiteBoardPosition.class);
    }

    /**
     * Creates an instance of type WhiteBoardPosition.  Modifies the underlying ontology.
     */
    public WhiteBoardPosition createWhiteBoardPosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WHITEBOARDPOSITION, DefaultWhiteBoardPosition.class);
    }

    /**
     * Gets an instance of type WhiteBoardPosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WhiteBoardPosition getWhiteBoardPosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WHITEBOARDPOSITION, DefaultWhiteBoardPosition.class);
    }

    /**
     * Gets all instances of WhiteBoardPosition from the ontology.
     */
    public Collection<? extends WhiteBoardPosition> getAllWhiteBoardPositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WHITEBOARDPOSITION, DefaultWhiteBoardPosition.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#WhitePiece
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#WhitePiece", WhitePiece.class, DefaultWhitePiece.class);
    }

    /**
     * Creates an instance of type WhitePiece.  Modifies the underlying ontology.
     */
    public WhitePiece createWhitePiece(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WHITEPIECE, DefaultWhitePiece.class);
    }

    /**
     * Gets an instance of type WhitePiece with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WhitePiece getWhitePiece(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WHITEPIECE, DefaultWhitePiece.class);
    }

    /**
     * Gets all instances of WhitePiece from the ontology.
     */
    public Collection<? extends WhitePiece> getAllWhitePieceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WHITEPIECE, DefaultWhitePiece.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1#Entity
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1#Entity", Entity.class, DefaultEntity.class);
    }

    /**
     * Creates an instance of type Entity.  Modifies the underlying ontology.
     */
    public Entity createEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }

    /**
     * Gets an instance of type Entity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Entity getEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }

    /**
     * Gets all instances of Entity from the ontology.
     */
    public Collection<? extends Entity> getAllEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Continuant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Continuant", Continuant.class, DefaultContinuant.class);
    }

    /**
     * Creates an instance of type Continuant.  Modifies the underlying ontology.
     */
    public Continuant createContinuant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTINUANT, DefaultContinuant.class);
    }

    /**
     * Gets an instance of type Continuant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Continuant getContinuant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTINUANT, DefaultContinuant.class);
    }

    /**
     * Gets all instances of Continuant from the ontology.
     */
    public Collection<? extends Continuant> getAllContinuantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTINUANT, DefaultContinuant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#DependentContinuant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#DependentContinuant", Dependent_continuant.class, DefaultDependent_continuant.class);
    }

    /**
     * Creates an instance of type Dependent_continuant.  Modifies the underlying ontology.
     */
    public Dependent_continuant createDependent_continuant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEPENDENT_CONTINUANT, DefaultDependent_continuant.class);
    }

    /**
     * Gets an instance of type Dependent_continuant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dependent_continuant getDependent_continuant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEPENDENT_CONTINUANT, DefaultDependent_continuant.class);
    }

    /**
     * Gets all instances of Dependent_continuant from the ontology.
     */
    public Collection<? extends Dependent_continuant> getAllDependent_continuantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEPENDENT_CONTINUANT, DefaultDependent_continuant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Disposition
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Disposition", Disposition.class, DefaultDisposition.class);
    }

    /**
     * Creates an instance of type Disposition.  Modifies the underlying ontology.
     */
    public Disposition createDisposition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISPOSITION, DefaultDisposition.class);
    }

    /**
     * Gets an instance of type Disposition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Disposition getDisposition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISPOSITION, DefaultDisposition.class);
    }

    /**
     * Gets all instances of Disposition from the ontology.
     */
    public Collection<? extends Disposition> getAllDispositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISPOSITION, DefaultDisposition.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#FiatObjectPart
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#FiatObjectPart", Fiat_object_part.class, DefaultFiat_object_part.class);
    }

    /**
     * Creates an instance of type Fiat_object_part.  Modifies the underlying ontology.
     */
    public Fiat_object_part createFiat_object_part(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FIAT_OBJECT_PART, DefaultFiat_object_part.class);
    }

    /**
     * Gets an instance of type Fiat_object_part with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fiat_object_part getFiat_object_part(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FIAT_OBJECT_PART, DefaultFiat_object_part.class);
    }

    /**
     * Gets all instances of Fiat_object_part from the ontology.
     */
    public Collection<? extends Fiat_object_part> getAllFiat_object_partInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FIAT_OBJECT_PART, DefaultFiat_object_part.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Function
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Function", Function.class, DefaultFunction.class);
    }

    /**
     * Creates an instance of type Function.  Modifies the underlying ontology.
     */
    public Function createFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }

    /**
     * Gets an instance of type Function with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Function getFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }

    /**
     * Gets all instances of Function from the ontology.
     */
    public Collection<? extends Function> getAllFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#GenericallyDependentContinuant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#GenericallyDependentContinuant", Generically_dependent_continuant.class, DefaultGenerically_dependent_continuant.class);
    }

    /**
     * Creates an instance of type Generically_dependent_continuant.  Modifies the underlying ontology.
     */
    public Generically_dependent_continuant createGenerically_dependent_continuant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GENERICALLY_DEPENDENT_CONTINUANT, DefaultGenerically_dependent_continuant.class);
    }

    /**
     * Gets an instance of type Generically_dependent_continuant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Generically_dependent_continuant getGenerically_dependent_continuant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GENERICALLY_DEPENDENT_CONTINUANT, DefaultGenerically_dependent_continuant.class);
    }

    /**
     * Gets all instances of Generically_dependent_continuant from the ontology.
     */
    public Collection<? extends Generically_dependent_continuant> getAllGenerically_dependent_continuantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GENERICALLY_DEPENDENT_CONTINUANT, DefaultGenerically_dependent_continuant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#IndependentContinuant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#IndependentContinuant", Independent_continuant.class, DefaultIndependent_continuant.class);
    }

    /**
     * Creates an instance of type Independent_continuant.  Modifies the underlying ontology.
     */
    public Independent_continuant createIndependent_continuant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INDEPENDENT_CONTINUANT, DefaultIndependent_continuant.class);
    }

    /**
     * Gets an instance of type Independent_continuant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Independent_continuant getIndependent_continuant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INDEPENDENT_CONTINUANT, DefaultIndependent_continuant.class);
    }

    /**
     * Gets all instances of Independent_continuant from the ontology.
     */
    public Collection<? extends Independent_continuant> getAllIndependent_continuantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INDEPENDENT_CONTINUANT, DefaultIndependent_continuant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#MaterialEntity
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#MaterialEntity", Material_entity.class, DefaultMaterial_entity.class);
    }

    /**
     * Creates an instance of type Material_entity.  Modifies the underlying ontology.
     */
    public Material_entity createMaterial_entity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATERIAL_ENTITY, DefaultMaterial_entity.class);
    }

    /**
     * Gets an instance of type Material_entity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Material_entity getMaterial_entity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATERIAL_ENTITY, DefaultMaterial_entity.class);
    }

    /**
     * Gets all instances of Material_entity from the ontology.
     */
    public Collection<? extends Material_entity> getAllMaterial_entityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATERIAL_ENTITY, DefaultMaterial_entity.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Object
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Object", Object.class, DefaultObject.class);
    }

    /**
     * Creates an instance of type Object.  Modifies the underlying ontology.
     */
    public Object createObject(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OBJECT, DefaultObject.class);
    }

    /**
     * Gets an instance of type Object with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Object getObject(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OBJECT, DefaultObject.class);
    }

    /**
     * Gets all instances of Object from the ontology.
     */
    public Collection<? extends Object> getAllObjectInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OBJECT, DefaultObject.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#ObjectAggregate
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#ObjectAggregate", Object_aggregate.class, DefaultObject_aggregate.class);
    }

    /**
     * Creates an instance of type Object_aggregate.  Modifies the underlying ontology.
     */
    public Object_aggregate createObject_aggregate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OBJECT_AGGREGATE, DefaultObject_aggregate.class);
    }

    /**
     * Gets an instance of type Object_aggregate with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Object_aggregate getObject_aggregate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OBJECT_AGGREGATE, DefaultObject_aggregate.class);
    }

    /**
     * Gets all instances of Object_aggregate from the ontology.
     */
    public Collection<? extends Object_aggregate> getAllObject_aggregateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OBJECT_AGGREGATE, DefaultObject_aggregate.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#ObjectBoundary
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#ObjectBoundary", Object_boundary.class, DefaultObject_boundary.class);
    }

    /**
     * Creates an instance of type Object_boundary.  Modifies the underlying ontology.
     */
    public Object_boundary createObject_boundary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OBJECT_BOUNDARY, DefaultObject_boundary.class);
    }

    /**
     * Gets an instance of type Object_boundary with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Object_boundary getObject_boundary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OBJECT_BOUNDARY, DefaultObject_boundary.class);
    }

    /**
     * Gets all instances of Object_boundary from the ontology.
     */
    public Collection<? extends Object_boundary> getAllObject_boundaryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OBJECT_BOUNDARY, DefaultObject_boundary.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#OneDimensionalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#OneDimensionalRegion", One_dimensional_region.class, DefaultOne_dimensional_region.class);
    }

    /**
     * Creates an instance of type One_dimensional_region.  Modifies the underlying ontology.
     */
    public One_dimensional_region createOne_dimensional_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ONE_DIMENSIONAL_REGION, DefaultOne_dimensional_region.class);
    }

    /**
     * Gets an instance of type One_dimensional_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public One_dimensional_region getOne_dimensional_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ONE_DIMENSIONAL_REGION, DefaultOne_dimensional_region.class);
    }

    /**
     * Gets all instances of One_dimensional_region from the ontology.
     */
    public Collection<? extends One_dimensional_region> getAllOne_dimensional_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ONE_DIMENSIONAL_REGION, DefaultOne_dimensional_region.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Quality
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Quality", Quality.class, DefaultQuality.class);
    }

    /**
     * Creates an instance of type Quality.  Modifies the underlying ontology.
     */
    public Quality createQuality(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QUALITY, DefaultQuality.class);
    }

    /**
     * Gets an instance of type Quality with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Quality getQuality(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QUALITY, DefaultQuality.class);
    }

    /**
     * Gets all instances of Quality from the ontology.
     */
    public Collection<? extends Quality> getAllQualityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QUALITY, DefaultQuality.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#RealizableEntity
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#RealizableEntity", Realizable_entity.class, DefaultRealizable_entity.class);
    }

    /**
     * Creates an instance of type Realizable_entity.  Modifies the underlying ontology.
     */
    public Realizable_entity createRealizable_entity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REALIZABLE_ENTITY, DefaultRealizable_entity.class);
    }

    /**
     * Gets an instance of type Realizable_entity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Realizable_entity getRealizable_entity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REALIZABLE_ENTITY, DefaultRealizable_entity.class);
    }

    /**
     * Gets all instances of Realizable_entity from the ontology.
     */
    public Collection<? extends Realizable_entity> getAllRealizable_entityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REALIZABLE_ENTITY, DefaultRealizable_entity.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Role
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Role", Role.class, DefaultRole.class);
    }

    /**
     * Creates an instance of type Role.  Modifies the underlying ontology.
     */
    public Role createRole(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROLE, DefaultRole.class);
    }

    /**
     * Gets an instance of type Role with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Role getRole(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROLE, DefaultRole.class);
    }

    /**
     * Gets all instances of Role from the ontology.
     */
    public Collection<? extends Role> getAllRoleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROLE, DefaultRole.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Site
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Site", Site.class, DefaultSite.class);
    }

    /**
     * Creates an instance of type Site.  Modifies the underlying ontology.
     */
    public Site createSite(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SITE, DefaultSite.class);
    }

    /**
     * Gets an instance of type Site with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Site getSite(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SITE, DefaultSite.class);
    }

    /**
     * Gets all instances of Site from the ontology.
     */
    public Collection<? extends Site> getAllSiteInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SITE, DefaultSite.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#SpatialRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#SpatialRegion", Spatial_region.class, DefaultSpatial_region.class);
    }

    /**
     * Creates an instance of type Spatial_region.  Modifies the underlying ontology.
     */
    public Spatial_region createSpatial_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPATIAL_REGION, DefaultSpatial_region.class);
    }

    /**
     * Gets an instance of type Spatial_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Spatial_region getSpatial_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPATIAL_REGION, DefaultSpatial_region.class);
    }

    /**
     * Gets all instances of Spatial_region from the ontology.
     */
    public Collection<? extends Spatial_region> getAllSpatial_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPATIAL_REGION, DefaultSpatial_region.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#SpecificallyDependentContinuant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#SpecificallyDependentContinuant", Specifically_dependent_continuant.class, DefaultSpecifically_dependent_continuant.class);
    }

    /**
     * Creates an instance of type Specifically_dependent_continuant.  Modifies the underlying ontology.
     */
    public Specifically_dependent_continuant createSpecifically_dependent_continuant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIFICALLY_DEPENDENT_CONTINUANT, DefaultSpecifically_dependent_continuant.class);
    }

    /**
     * Gets an instance of type Specifically_dependent_continuant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Specifically_dependent_continuant getSpecifically_dependent_continuant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIFICALLY_DEPENDENT_CONTINUANT, DefaultSpecifically_dependent_continuant.class);
    }

    /**
     * Gets all instances of Specifically_dependent_continuant from the ontology.
     */
    public Collection<? extends Specifically_dependent_continuant> getAllSpecifically_dependent_continuantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIFICALLY_DEPENDENT_CONTINUANT, DefaultSpecifically_dependent_continuant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#ThreeDimensionalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#ThreeDimensionalRegion", Three_dimensional_region.class, DefaultThree_dimensional_region.class);
    }

    /**
     * Creates an instance of type Three_dimensional_region.  Modifies the underlying ontology.
     */
    public Three_dimensional_region createThree_dimensional_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THREE_DIMENSIONAL_REGION, DefaultThree_dimensional_region.class);
    }

    /**
     * Gets an instance of type Three_dimensional_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Three_dimensional_region getThree_dimensional_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THREE_DIMENSIONAL_REGION, DefaultThree_dimensional_region.class);
    }

    /**
     * Gets all instances of Three_dimensional_region from the ontology.
     */
    public Collection<? extends Three_dimensional_region> getAllThree_dimensional_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THREE_DIMENSIONAL_REGION, DefaultThree_dimensional_region.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#TwoDimensionalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#TwoDimensionalRegion", Two_dimensional_region.class, DefaultTwo_dimensional_region.class);
    }

    /**
     * Creates an instance of type Two_dimensional_region.  Modifies the underlying ontology.
     */
    public Two_dimensional_region createTwo_dimensional_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TWO_DIMENSIONAL_REGION, DefaultTwo_dimensional_region.class);
    }

    /**
     * Gets an instance of type Two_dimensional_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Two_dimensional_region getTwo_dimensional_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TWO_DIMENSIONAL_REGION, DefaultTwo_dimensional_region.class);
    }

    /**
     * Gets all instances of Two_dimensional_region from the ontology.
     */
    public Collection<? extends Two_dimensional_region> getAllTwo_dimensional_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TWO_DIMENSIONAL_REGION, DefaultTwo_dimensional_region.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#ZeroDimensionalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#ZeroDimensionalRegion", Zero_dimensional_region.class, DefaultZero_dimensional_region.class);
    }

    /**
     * Creates an instance of type Zero_dimensional_region.  Modifies the underlying ontology.
     */
    public Zero_dimensional_region createZero_dimensional_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ZERO_DIMENSIONAL_REGION, DefaultZero_dimensional_region.class);
    }

    /**
     * Gets an instance of type Zero_dimensional_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Zero_dimensional_region getZero_dimensional_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ZERO_DIMENSIONAL_REGION, DefaultZero_dimensional_region.class);
    }

    /**
     * Gets all instances of Zero_dimensional_region from the ontology.
     */
    public Collection<? extends Zero_dimensional_region> getAllZero_dimensional_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ZERO_DIMENSIONAL_REGION, DefaultZero_dimensional_region.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ConnectedSpatiotemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ConnectedSpatiotemporalRegion", Connected_spatiotemporal_region.class, DefaultConnected_spatiotemporal_region.class);
    }

    /**
     * Creates an instance of type Connected_spatiotemporal_region.  Modifies the underlying ontology.
     */
    public Connected_spatiotemporal_region createConnected_spatiotemporal_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONNECTED_SPATIOTEMPORAL_REGION, DefaultConnected_spatiotemporal_region.class);
    }

    /**
     * Gets an instance of type Connected_spatiotemporal_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Connected_spatiotemporal_region getConnected_spatiotemporal_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONNECTED_SPATIOTEMPORAL_REGION, DefaultConnected_spatiotemporal_region.class);
    }

    /**
     * Gets all instances of Connected_spatiotemporal_region from the ontology.
     */
    public Collection<? extends Connected_spatiotemporal_region> getAllConnected_spatiotemporal_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONNECTED_SPATIOTEMPORAL_REGION, DefaultConnected_spatiotemporal_region.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ConnectedTemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ConnectedTemporalRegion", Connected_temporal_region.class, DefaultConnected_temporal_region.class);
    }

    /**
     * Creates an instance of type Connected_temporal_region.  Modifies the underlying ontology.
     */
    public Connected_temporal_region createConnected_temporal_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONNECTED_TEMPORAL_REGION, DefaultConnected_temporal_region.class);
    }

    /**
     * Gets an instance of type Connected_temporal_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Connected_temporal_region getConnected_temporal_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONNECTED_TEMPORAL_REGION, DefaultConnected_temporal_region.class);
    }

    /**
     * Gets all instances of Connected_temporal_region from the ontology.
     */
    public Collection<? extends Connected_temporal_region> getAllConnected_temporal_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONNECTED_TEMPORAL_REGION, DefaultConnected_temporal_region.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#FiatProcessPart
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#FiatProcessPart", Fiat_process_part.class, DefaultFiat_process_part.class);
    }

    /**
     * Creates an instance of type Fiat_process_part.  Modifies the underlying ontology.
     */
    public Fiat_process_part createFiat_process_part(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FIAT_PROCESS_PART, DefaultFiat_process_part.class);
    }

    /**
     * Gets an instance of type Fiat_process_part with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fiat_process_part getFiat_process_part(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FIAT_PROCESS_PART, DefaultFiat_process_part.class);
    }

    /**
     * Gets all instances of Fiat_process_part from the ontology.
     */
    public Collection<? extends Fiat_process_part> getAllFiat_process_partInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FIAT_PROCESS_PART, DefaultFiat_process_part.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#Occurrent
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#Occurrent", Occurrent.class, DefaultOccurrent.class);
    }

    /**
     * Creates an instance of type Occurrent.  Modifies the underlying ontology.
     */
    public Occurrent createOccurrent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OCCURRENT, DefaultOccurrent.class);
    }

    /**
     * Gets an instance of type Occurrent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Occurrent getOccurrent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OCCURRENT, DefaultOccurrent.class);
    }

    /**
     * Gets all instances of Occurrent from the ontology.
     */
    public Collection<? extends Occurrent> getAllOccurrentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OCCURRENT, DefaultOccurrent.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#Process
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#Process", Process.class, DefaultProcess.class);
    }

    /**
     * Creates an instance of type Process.  Modifies the underlying ontology.
     */
    public Process createProcess(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESS, DefaultProcess.class);
    }

    /**
     * Gets an instance of type Process with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Process getProcess(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESS, DefaultProcess.class);
    }

    /**
     * Gets all instances of Process from the ontology.
     */
    public Collection<? extends Process> getAllProcessInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESS, DefaultProcess.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ProcessAggregate
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ProcessAggregate", Process_aggregate.class, DefaultProcess_aggregate.class);
    }

    /**
     * Creates an instance of type Process_aggregate.  Modifies the underlying ontology.
     */
    public Process_aggregate createProcess_aggregate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESS_AGGREGATE, DefaultProcess_aggregate.class);
    }

    /**
     * Gets an instance of type Process_aggregate with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Process_aggregate getProcess_aggregate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESS_AGGREGATE, DefaultProcess_aggregate.class);
    }

    /**
     * Gets all instances of Process_aggregate from the ontology.
     */
    public Collection<? extends Process_aggregate> getAllProcess_aggregateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESS_AGGREGATE, DefaultProcess_aggregate.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ProcessBoundary
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ProcessBoundary", Process_boundary.class, DefaultProcess_boundary.class);
    }

    /**
     * Creates an instance of type Process_boundary.  Modifies the underlying ontology.
     */
    public Process_boundary createProcess_boundary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESS_BOUNDARY, DefaultProcess_boundary.class);
    }

    /**
     * Gets an instance of type Process_boundary with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Process_boundary getProcess_boundary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESS_BOUNDARY, DefaultProcess_boundary.class);
    }

    /**
     * Gets all instances of Process_boundary from the ontology.
     */
    public Collection<? extends Process_boundary> getAllProcess_boundaryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESS_BOUNDARY, DefaultProcess_boundary.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ProcessualContext
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ProcessualContext", Processual_context.class, DefaultProcessual_context.class);
    }

    /**
     * Creates an instance of type Processual_context.  Modifies the underlying ontology.
     */
    public Processual_context createProcessual_context(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESSUAL_CONTEXT, DefaultProcessual_context.class);
    }

    /**
     * Gets an instance of type Processual_context with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Processual_context getProcessual_context(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESSUAL_CONTEXT, DefaultProcessual_context.class);
    }

    /**
     * Gets all instances of Processual_context from the ontology.
     */
    public Collection<? extends Processual_context> getAllProcessual_contextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESSUAL_CONTEXT, DefaultProcessual_context.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ProcessualEntity
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ProcessualEntity", Processual_entity.class, DefaultProcessual_entity.class);
    }

    /**
     * Creates an instance of type Processual_entity.  Modifies the underlying ontology.
     */
    public Processual_entity createProcessual_entity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESSUAL_ENTITY, DefaultProcessual_entity.class);
    }

    /**
     * Gets an instance of type Processual_entity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Processual_entity getProcessual_entity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESSUAL_ENTITY, DefaultProcessual_entity.class);
    }

    /**
     * Gets all instances of Processual_entity from the ontology.
     */
    public Collection<? extends Processual_entity> getAllProcessual_entityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESSUAL_ENTITY, DefaultProcessual_entity.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ScatteredSpatiotemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ScatteredSpatiotemporalRegion", Scattered_spatiotemporal_region.class, DefaultScattered_spatiotemporal_region.class);
    }

    /**
     * Creates an instance of type Scattered_spatiotemporal_region.  Modifies the underlying ontology.
     */
    public Scattered_spatiotemporal_region createScattered_spatiotemporal_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCATTERED_SPATIOTEMPORAL_REGION, DefaultScattered_spatiotemporal_region.class);
    }

    /**
     * Gets an instance of type Scattered_spatiotemporal_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Scattered_spatiotemporal_region getScattered_spatiotemporal_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCATTERED_SPATIOTEMPORAL_REGION, DefaultScattered_spatiotemporal_region.class);
    }

    /**
     * Gets all instances of Scattered_spatiotemporal_region from the ontology.
     */
    public Collection<? extends Scattered_spatiotemporal_region> getAllScattered_spatiotemporal_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCATTERED_SPATIOTEMPORAL_REGION, DefaultScattered_spatiotemporal_region.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ScatteredTemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ScatteredTemporalRegion", Scattered_temporal_region.class, DefaultScattered_temporal_region.class);
    }

    /**
     * Creates an instance of type Scattered_temporal_region.  Modifies the underlying ontology.
     */
    public Scattered_temporal_region createScattered_temporal_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCATTERED_TEMPORAL_REGION, DefaultScattered_temporal_region.class);
    }

    /**
     * Gets an instance of type Scattered_temporal_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Scattered_temporal_region getScattered_temporal_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCATTERED_TEMPORAL_REGION, DefaultScattered_temporal_region.class);
    }

    /**
     * Gets all instances of Scattered_temporal_region from the ontology.
     */
    public Collection<? extends Scattered_temporal_region> getAllScattered_temporal_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCATTERED_TEMPORAL_REGION, DefaultScattered_temporal_region.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#SpatiotemporalInstant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#SpatiotemporalInstant", Spatiotemporal_instant.class, DefaultSpatiotemporal_instant.class);
    }

    /**
     * Creates an instance of type Spatiotemporal_instant.  Modifies the underlying ontology.
     */
    public Spatiotemporal_instant createSpatiotemporal_instant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORAL_INSTANT, DefaultSpatiotemporal_instant.class);
    }

    /**
     * Gets an instance of type Spatiotemporal_instant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Spatiotemporal_instant getSpatiotemporal_instant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORAL_INSTANT, DefaultSpatiotemporal_instant.class);
    }

    /**
     * Gets all instances of Spatiotemporal_instant from the ontology.
     */
    public Collection<? extends Spatiotemporal_instant> getAllSpatiotemporal_instantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPATIOTEMPORAL_INSTANT, DefaultSpatiotemporal_instant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#SpatiotemporalInterval
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#SpatiotemporalInterval", Spatiotemporal_interval.class, DefaultSpatiotemporal_interval.class);
    }

    /**
     * Creates an instance of type Spatiotemporal_interval.  Modifies the underlying ontology.
     */
    public Spatiotemporal_interval createSpatiotemporal_interval(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORAL_INTERVAL, DefaultSpatiotemporal_interval.class);
    }

    /**
     * Gets an instance of type Spatiotemporal_interval with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Spatiotemporal_interval getSpatiotemporal_interval(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORAL_INTERVAL, DefaultSpatiotemporal_interval.class);
    }

    /**
     * Gets all instances of Spatiotemporal_interval from the ontology.
     */
    public Collection<? extends Spatiotemporal_interval> getAllSpatiotemporal_intervalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPATIOTEMPORAL_INTERVAL, DefaultSpatiotemporal_interval.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#SpatiotemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#SpatiotemporalRegion", Spatiotemporal_region.class, DefaultSpatiotemporal_region.class);
    }

    /**
     * Creates an instance of type Spatiotemporal_region.  Modifies the underlying ontology.
     */
    public Spatiotemporal_region createSpatiotemporal_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORAL_REGION, DefaultSpatiotemporal_region.class);
    }

    /**
     * Gets an instance of type Spatiotemporal_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Spatiotemporal_region getSpatiotemporal_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORAL_REGION, DefaultSpatiotemporal_region.class);
    }

    /**
     * Gets all instances of Spatiotemporal_region from the ontology.
     */
    public Collection<? extends Spatiotemporal_region> getAllSpatiotemporal_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPATIOTEMPORAL_REGION, DefaultSpatiotemporal_region.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#TemporalInstant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#TemporalInstant", Temporal_instant.class, DefaultTemporal_instant.class);
    }

    /**
     * Creates an instance of type Temporal_instant.  Modifies the underlying ontology.
     */
    public Temporal_instant createTemporal_instant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPORAL_INSTANT, DefaultTemporal_instant.class);
    }

    /**
     * Gets an instance of type Temporal_instant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Temporal_instant getTemporal_instant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPORAL_INSTANT, DefaultTemporal_instant.class);
    }

    /**
     * Gets all instances of Temporal_instant from the ontology.
     */
    public Collection<? extends Temporal_instant> getAllTemporal_instantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPORAL_INSTANT, DefaultTemporal_instant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#TemporalInterval
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#TemporalInterval", Temporal_interval.class, DefaultTemporal_interval.class);
    }

    /**
     * Creates an instance of type Temporal_interval.  Modifies the underlying ontology.
     */
    public Temporal_interval createTemporal_interval(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPORAL_INTERVAL, DefaultTemporal_interval.class);
    }

    /**
     * Gets an instance of type Temporal_interval with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Temporal_interval getTemporal_interval(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPORAL_INTERVAL, DefaultTemporal_interval.class);
    }

    /**
     * Gets all instances of Temporal_interval from the ontology.
     */
    public Collection<? extends Temporal_interval> getAllTemporal_intervalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPORAL_INTERVAL, DefaultTemporal_interval.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#TemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#TemporalRegion", Temporal_region.class, DefaultTemporal_region.class);
    }

    /**
     * Creates an instance of type Temporal_region.  Modifies the underlying ontology.
     */
    public Temporal_region createTemporal_region(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPORAL_REGION, DefaultTemporal_region.class);
    }

    /**
     * Gets an instance of type Temporal_region with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Temporal_region getTemporal_region(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPORAL_REGION, DefaultTemporal_region.class);
    }

    /**
     * Gets all instances of Temporal_region from the ontology.
     */
    public Collection<? extends Temporal_region> getAllTemporal_regionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPORAL_REGION, DefaultTemporal_region.class);
    }


}
