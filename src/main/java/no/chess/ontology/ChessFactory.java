package no.chess.ontology;

import no.chess.ontology.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: ChessFactory<br>
 * @version generated on Tue Oct 09 13:17:05 CEST 2018 by olj
 */
public class ChessFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public ChessFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public ChessFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://oljontologies.org/games/chess#BlackGamePosition
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#BlackGamePosition", BlackGamePosition.class, DefaultBlackGamePosition.class);
    }

    /**
     * Creates an instance of type BlackGamePosition.  Modifies the underlying ontology.
     */
    public BlackGamePosition createBlackGamePosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLACKGAMEPOSITION, DefaultBlackGamePosition.class);
    }

    /**
     * Gets an instance of type BlackGamePosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BlackGamePosition getBlackGamePosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLACKGAMEPOSITION, DefaultBlackGamePosition.class);
    }

    /**
     * Gets all instances of BlackGamePosition from the ontology.
     */
    public Collection<? extends BlackGamePosition> getAllBlackGamePositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLACKGAMEPOSITION, DefaultBlackGamePosition.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#BlackPlayer
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#BlackPlayer", BlackPlayer.class, DefaultBlackPlayer.class);
    }

    /**
     * Creates an instance of type BlackPlayer.  Modifies the underlying ontology.
     */
    public BlackPlayer createBlackPlayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLACKPLAYER, DefaultBlackPlayer.class);
    }

    /**
     * Gets an instance of type BlackPlayer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BlackPlayer getBlackPlayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLACKPLAYER, DefaultBlackPlayer.class);
    }

    /**
     * Gets all instances of BlackPlayer from the ontology.
     */
    public Collection<? extends BlackPlayer> getAllBlackPlayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLACKPLAYER, DefaultBlackPlayer.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#ChessPiece
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#ChessPiece", ChessPiece.class, DefaultChessPiece.class);
    }

    /**
     * Creates an instance of type ChessPiece.  Modifies the underlying ontology.
     */
    public ChessPiece createChessPiece(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHESSPIECE, DefaultChessPiece.class);
    }

    /**
     * Gets an instance of type ChessPiece with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ChessPiece getChessPiece(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHESSPIECE, DefaultChessPiece.class);
    }

    /**
     * Gets all instances of ChessPiece from the ontology.
     */
    public Collection<? extends ChessPiece> getAllChessPieceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHESSPIECE, DefaultChessPiece.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#ChessPosition
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#ChessPosition", ChessPosition.class, DefaultChessPosition.class);
    }

    /**
     * Creates an instance of type ChessPosition.  Modifies the underlying ontology.
     */
    public ChessPosition createChessPosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHESSPOSITION, DefaultChessPosition.class);
    }

    /**
     * Gets an instance of type ChessPosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ChessPosition getChessPosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHESSPOSITION, DefaultChessPosition.class);
    }

    /**
     * Gets all instances of ChessPosition from the ontology.
     */
    public Collection<? extends ChessPosition> getAllChessPositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHESSPOSITION, DefaultChessPosition.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#GamePiece
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#GamePiece", GamePiece.class, DefaultGamePiece.class);
    }

    /**
     * Creates an instance of type GamePiece.  Modifies the underlying ontology.
     */
    public GamePiece createGamePiece(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GAMEPIECE, DefaultGamePiece.class);
    }

    /**
     * Gets an instance of type GamePiece with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GamePiece getGamePiece(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GAMEPIECE, DefaultGamePiece.class);
    }

    /**
     * Gets all instances of GamePiece from the ontology.
     */
    public Collection<? extends GamePiece> getAllGamePieceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GAMEPIECE, DefaultGamePiece.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#GamePosition
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#GamePosition", GamePosition.class, DefaultGamePosition.class);
    }

    /**
     * Creates an instance of type GamePosition.  Modifies the underlying ontology.
     */
    public GamePosition createGamePosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GAMEPOSITION, DefaultGamePosition.class);
    }

    /**
     * Gets an instance of type GamePosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GamePosition getGamePosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GAMEPOSITION, DefaultGamePosition.class);
    }

    /**
     * Gets all instances of GamePosition from the ontology.
     */
    public Collection<? extends GamePosition> getAllGamePositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GAMEPOSITION, DefaultGamePosition.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#Occupant
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#Occupant", Occupant.class, DefaultOccupant.class);
    }

    /**
     * Creates an instance of type Occupant.  Modifies the underlying ontology.
     */
    public Occupant createOccupant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OCCUPANT, DefaultOccupant.class);
    }

    /**
     * Gets an instance of type Occupant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Occupant getOccupant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OCCUPANT, DefaultOccupant.class);
    }

    /**
     * Gets all instances of Occupant from the ontology.
     */
    public Collection<? extends Occupant> getAllOccupantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OCCUPANT, DefaultOccupant.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#Offline
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#Offline", Offline.class, DefaultOffline.class);
    }

    /**
     * Creates an instance of type Offline.  Modifies the underlying ontology.
     */
    public Offline createOffline(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OFFLINE, DefaultOffline.class);
    }

    /**
     * Gets an instance of type Offline with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Offline getOffline(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OFFLINE, DefaultOffline.class);
    }

    /**
     * Gets all instances of Offline from the ontology.
     */
    public Collection<? extends Offline> getAllOfflineInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OFFLINE, DefaultOffline.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#Taken
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#Taken", Taken.class, DefaultTaken.class);
    }

    /**
     * Creates an instance of type Taken.  Modifies the underlying ontology.
     */
    public Taken createTaken(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TAKEN, DefaultTaken.class);
    }

    /**
     * Gets an instance of type Taken with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Taken getTaken(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TAKEN, DefaultTaken.class);
    }

    /**
     * Gets all instances of Taken from the ontology.
     */
    public Collection<? extends Taken> getAllTakenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TAKEN, DefaultTaken.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#Vacant
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#Vacant", Vacant.class, DefaultVacant.class);
    }

    /**
     * Creates an instance of type Vacant.  Modifies the underlying ontology.
     */
    public Vacant createVacant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VACANT, DefaultVacant.class);
    }

    /**
     * Gets an instance of type Vacant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Vacant getVacant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VACANT, DefaultVacant.class);
    }

    /**
     * Gets all instances of Vacant from the ontology.
     */
    public Collection<? extends Vacant> getAllVacantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VACANT, DefaultVacant.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#WhiteGamePosition
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#WhiteGamePosition", WhiteGamePosition.class, DefaultWhiteGamePosition.class);
    }

    /**
     * Creates an instance of type WhiteGamePosition.  Modifies the underlying ontology.
     */
    public WhiteGamePosition createWhiteGamePosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WHITEGAMEPOSITION, DefaultWhiteGamePosition.class);
    }

    /**
     * Gets an instance of type WhiteGamePosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WhiteGamePosition getWhiteGamePosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WHITEGAMEPOSITION, DefaultWhiteGamePosition.class);
    }

    /**
     * Gets all instances of WhiteGamePosition from the ontology.
     */
    public Collection<? extends WhiteGamePosition> getAllWhiteGamePositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WHITEGAMEPOSITION, DefaultWhiteGamePosition.class);
    }


    /* ***************************************************
     * Class http://oljontologies.org/games/chess#WhitePlayer
     */

    {
        javaMapping.add("http://oljontologies.org/games/chess#WhitePlayer", WhitePlayer.class, DefaultWhitePlayer.class);
    }

    /**
     * Creates an instance of type WhitePlayer.  Modifies the underlying ontology.
     */
    public WhitePlayer createWhitePlayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WHITEPLAYER, DefaultWhitePlayer.class);
    }

    /**
     * Gets an instance of type WhitePlayer with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WhitePlayer getWhitePlayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WHITEPLAYER, DefaultWhitePlayer.class);
    }

    /**
     * Gets all instances of WhitePlayer from the ontology.
     */
    public Collection<? extends WhitePlayer> getAllWhitePlayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WHITEPLAYER, DefaultWhitePlayer.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#BlackBoardPosition
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#BlackBoardPosition", BlackBoardPosition.class, DefaultBlackBoardPosition.class);
    }

    /**
     * Creates an instance of type BlackBoardPosition.  Modifies the underlying ontology.
     */
    public BlackBoardPosition createBlackBoardPosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLACKBOARDPOSITION, DefaultBlackBoardPosition.class);
    }

    /**
     * Gets an instance of type BlackBoardPosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BlackBoardPosition getBlackBoardPosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLACKBOARDPOSITION, DefaultBlackBoardPosition.class);
    }

    /**
     * Gets all instances of BlackBoardPosition from the ontology.
     */
    public Collection<? extends BlackBoardPosition> getAllBlackBoardPositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLACKBOARDPOSITION, DefaultBlackBoardPosition.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#BlackPiece
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#BlackPiece", BlackPiece.class, DefaultBlackPiece.class);
    }

    /**
     * Creates an instance of type BlackPiece.  Modifies the underlying ontology.
     */
    public BlackPiece createBlackPiece(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLACKPIECE, DefaultBlackPiece.class);
    }

    /**
     * Gets an instance of type BlackPiece with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BlackPiece getBlackPiece(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLACKPIECE, DefaultBlackPiece.class);
    }

    /**
     * Gets all instances of BlackPiece from the ontology.
     */
    public Collection<? extends BlackPiece> getAllBlackPieceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLACKPIECE, DefaultBlackPiece.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#BoardPosition
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#BoardPosition", BoardPosition.class, DefaultBoardPosition.class);
    }

    /**
     * Creates an instance of type BoardPosition.  Modifies the underlying ontology.
     */
    public BoardPosition createBoardPosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BOARDPOSITION, DefaultBoardPosition.class);
    }

    /**
     * Gets an instance of type BoardPosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BoardPosition getBoardPosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BOARDPOSITION, DefaultBoardPosition.class);
    }

    /**
     * Gets all instances of BoardPosition from the ontology.
     */
    public Collection<? extends BoardPosition> getAllBoardPositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BOARDPOSITION, DefaultBoardPosition.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#ChessGame
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#ChessGame", ChessGame.class, DefaultChessGame.class);
    }

    /**
     * Creates an instance of type ChessGame.  Modifies the underlying ontology.
     */
    public ChessGame createChessGame(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHESSGAME, DefaultChessGame.class);
    }

    /**
     * Gets an instance of type ChessGame with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ChessGame getChessGame(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHESSGAME, DefaultChessGame.class);
    }

    /**
     * Gets all instances of ChessGame from the ontology.
     */
    public Collection<? extends ChessGame> getAllChessGameInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHESSGAME, DefaultChessGame.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#Chessboard
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#Chessboard", Chessboard.class, DefaultChessboard.class);
    }

    /**
     * Creates an instance of type Chessboard.  Modifies the underlying ontology.
     */
    public Chessboard createChessboard(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHESSBOARD, DefaultChessboard.class);
    }

    /**
     * Gets an instance of type Chessboard with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Chessboard getChessboard(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHESSBOARD, DefaultChessboard.class);
    }

    /**
     * Gets all instances of Chessboard from the ontology.
     */
    public Collection<? extends Chessboard> getAllChessboardInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHESSBOARD, DefaultChessboard.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#Move
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#Move", Move.class, DefaultMove.class);
    }

    /**
     * Creates an instance of type Move.  Modifies the underlying ontology.
     */
    public Move createMove(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOVE, DefaultMove.class);
    }

    /**
     * Gets an instance of type Move with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Move getMove(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOVE, DefaultMove.class);
    }

    /**
     * Gets all instances of Move from the ontology.
     */
    public Collection<? extends Move> getAllMoveInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOVE, DefaultMove.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#Piece
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#Piece", Piece.class, DefaultPiece.class);
    }

    /**
     * Creates an instance of type Piece.  Modifies the underlying ontology.
     */
    public Piece createPiece(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PIECE, DefaultPiece.class);
    }

    /**
     * Gets an instance of type Piece with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Piece getPiece(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PIECE, DefaultPiece.class);
    }

    /**
     * Gets all instances of Piece from the ontology.
     */
    public Collection<? extends Piece> getAllPieceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PIECE, DefaultPiece.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#Player
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#Player", Player.class, DefaultPlayer.class);
    }

    /**
     * Creates an instance of type Player.  Modifies the underlying ontology.
     */
    public Player createPlayer(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PLAYER, DefaultPlayer.class);
    }

    /**
     * Gets an instance of type Player with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Player getPlayer(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PLAYER, DefaultPlayer.class);
    }

    /**
     * Gets all instances of Player from the ontology.
     */
    public Collection<? extends Player> getAllPlayerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PLAYER, DefaultPlayer.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#WhiteBoardPosition
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#WhiteBoardPosition", WhiteBoardPosition.class, DefaultWhiteBoardPosition.class);
    }

    /**
     * Creates an instance of type WhiteBoardPosition.  Modifies the underlying ontology.
     */
    public WhiteBoardPosition createWhiteBoardPosition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WHITEBOARDPOSITION, DefaultWhiteBoardPosition.class);
    }

    /**
     * Gets an instance of type WhiteBoardPosition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WhiteBoardPosition getWhiteBoardPosition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WHITEBOARDPOSITION, DefaultWhiteBoardPosition.class);
    }

    /**
     * Gets all instances of WhiteBoardPosition from the ontology.
     */
    public Collection<? extends WhiteBoardPosition> getAllWhiteBoardPositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WHITEBOARDPOSITION, DefaultWhiteBoardPosition.class);
    }


    /* ***************************************************
     * Class http://www.co-ode.org/ontologies/ont.owl#WhitePiece
     */

    {
        javaMapping.add("http://www.co-ode.org/ontologies/ont.owl#WhitePiece", WhitePiece.class, DefaultWhitePiece.class);
    }

    /**
     * Creates an instance of type WhitePiece.  Modifies the underlying ontology.
     */
    public WhitePiece createWhitePiece(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WHITEPIECE, DefaultWhitePiece.class);
    }

    /**
     * Gets an instance of type WhitePiece with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WhitePiece getWhitePiece(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WHITEPIECE, DefaultWhitePiece.class);
    }

    /**
     * Gets all instances of WhitePiece from the ontology.
     */
    public Collection<? extends WhitePiece> getAllWhitePieceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WHITEPIECE, DefaultWhitePiece.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1#Entity
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1#Entity", Entity.class, DefaultEntity.class);
    }

    /**
     * Creates an instance of type Entity.  Modifies the underlying ontology.
     */
    public Entity createEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }

    /**
     * Gets an instance of type Entity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Entity getEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }

    /**
     * Gets all instances of Entity from the ontology.
     */
    public Collection<? extends Entity> getAllEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENTITY, DefaultEntity.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#BFObject
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#BFObject", BFObject.class, DefaultBFObject.class);
    }

    /**
     * Creates an instance of type BFObject.  Modifies the underlying ontology.
     */
    public BFObject createBFObject(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BFOBJECT, DefaultBFObject.class);
    }

    /**
     * Gets an instance of type BFObject with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BFObject getBFObject(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BFOBJECT, DefaultBFObject.class);
    }

    /**
     * Gets all instances of BFObject from the ontology.
     */
    public Collection<? extends BFObject> getAllBFObjectInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BFOBJECT, DefaultBFObject.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Continuant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Continuant", Continuant.class, DefaultContinuant.class);
    }

    /**
     * Creates an instance of type Continuant.  Modifies the underlying ontology.
     */
    public Continuant createContinuant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONTINUANT, DefaultContinuant.class);
    }

    /**
     * Gets an instance of type Continuant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Continuant getContinuant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONTINUANT, DefaultContinuant.class);
    }

    /**
     * Gets all instances of Continuant from the ontology.
     */
    public Collection<? extends Continuant> getAllContinuantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONTINUANT, DefaultContinuant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#DependentContinuant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#DependentContinuant", DependentContinuant.class, DefaultDependentContinuant.class);
    }

    /**
     * Creates an instance of type DependentContinuant.  Modifies the underlying ontology.
     */
    public DependentContinuant createDependentContinuant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEPENDENTCONTINUANT, DefaultDependentContinuant.class);
    }

    /**
     * Gets an instance of type DependentContinuant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DependentContinuant getDependentContinuant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEPENDENTCONTINUANT, DefaultDependentContinuant.class);
    }

    /**
     * Gets all instances of DependentContinuant from the ontology.
     */
    public Collection<? extends DependentContinuant> getAllDependentContinuantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEPENDENTCONTINUANT, DefaultDependentContinuant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Disposition
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Disposition", Disposition.class, DefaultDisposition.class);
    }

    /**
     * Creates an instance of type Disposition.  Modifies the underlying ontology.
     */
    public Disposition createDisposition(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISPOSITION, DefaultDisposition.class);
    }

    /**
     * Gets an instance of type Disposition with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Disposition getDisposition(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISPOSITION, DefaultDisposition.class);
    }

    /**
     * Gets all instances of Disposition from the ontology.
     */
    public Collection<? extends Disposition> getAllDispositionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISPOSITION, DefaultDisposition.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#FiatObjectPart
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#FiatObjectPart", FiatObjectPart.class, DefaultFiatObjectPart.class);
    }

    /**
     * Creates an instance of type FiatObjectPart.  Modifies the underlying ontology.
     */
    public FiatObjectPart createFiatObjectPart(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FIATOBJECTPART, DefaultFiatObjectPart.class);
    }

    /**
     * Gets an instance of type FiatObjectPart with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FiatObjectPart getFiatObjectPart(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FIATOBJECTPART, DefaultFiatObjectPart.class);
    }

    /**
     * Gets all instances of FiatObjectPart from the ontology.
     */
    public Collection<? extends FiatObjectPart> getAllFiatObjectPartInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FIATOBJECTPART, DefaultFiatObjectPart.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Function
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Function", Function.class, DefaultFunction.class);
    }

    /**
     * Creates an instance of type Function.  Modifies the underlying ontology.
     */
    public Function createFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }

    /**
     * Gets an instance of type Function with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Function getFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }

    /**
     * Gets all instances of Function from the ontology.
     */
    public Collection<? extends Function> getAllFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#GenericallyDependentContinuant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#GenericallyDependentContinuant", GenericallyDependentContinuant.class, DefaultGenericallyDependentContinuant.class);
    }

    /**
     * Creates an instance of type GenericallyDependentContinuant.  Modifies the underlying ontology.
     */
    public GenericallyDependentContinuant createGenericallyDependentContinuant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GENERICALLYDEPENDENTCONTINUANT, DefaultGenericallyDependentContinuant.class);
    }

    /**
     * Gets an instance of type GenericallyDependentContinuant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GenericallyDependentContinuant getGenericallyDependentContinuant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GENERICALLYDEPENDENTCONTINUANT, DefaultGenericallyDependentContinuant.class);
    }

    /**
     * Gets all instances of GenericallyDependentContinuant from the ontology.
     */
    public Collection<? extends GenericallyDependentContinuant> getAllGenericallyDependentContinuantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GENERICALLYDEPENDENTCONTINUANT, DefaultGenericallyDependentContinuant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#IndependentContinuant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#IndependentContinuant", IndependentContinuant.class, DefaultIndependentContinuant.class);
    }

    /**
     * Creates an instance of type IndependentContinuant.  Modifies the underlying ontology.
     */
    public IndependentContinuant createIndependentContinuant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INDEPENDENTCONTINUANT, DefaultIndependentContinuant.class);
    }

    /**
     * Gets an instance of type IndependentContinuant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IndependentContinuant getIndependentContinuant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INDEPENDENTCONTINUANT, DefaultIndependentContinuant.class);
    }

    /**
     * Gets all instances of IndependentContinuant from the ontology.
     */
    public Collection<? extends IndependentContinuant> getAllIndependentContinuantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INDEPENDENTCONTINUANT, DefaultIndependentContinuant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#MaterialEntity
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#MaterialEntity", MaterialEntity.class, DefaultMaterialEntity.class);
    }

    /**
     * Creates an instance of type MaterialEntity.  Modifies the underlying ontology.
     */
    public MaterialEntity createMaterialEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATERIALENTITY, DefaultMaterialEntity.class);
    }

    /**
     * Gets an instance of type MaterialEntity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MaterialEntity getMaterialEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATERIALENTITY, DefaultMaterialEntity.class);
    }

    /**
     * Gets all instances of MaterialEntity from the ontology.
     */
    public Collection<? extends MaterialEntity> getAllMaterialEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATERIALENTITY, DefaultMaterialEntity.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#ObjectAggregate
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#ObjectAggregate", ObjectAggregate.class, DefaultObjectAggregate.class);
    }

    /**
     * Creates an instance of type ObjectAggregate.  Modifies the underlying ontology.
     */
    public ObjectAggregate createObjectAggregate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OBJECTAGGREGATE, DefaultObjectAggregate.class);
    }

    /**
     * Gets an instance of type ObjectAggregate with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ObjectAggregate getObjectAggregate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OBJECTAGGREGATE, DefaultObjectAggregate.class);
    }

    /**
     * Gets all instances of ObjectAggregate from the ontology.
     */
    public Collection<? extends ObjectAggregate> getAllObjectAggregateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OBJECTAGGREGATE, DefaultObjectAggregate.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#ObjectBoundary
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#ObjectBoundary", ObjectBoundary.class, DefaultObjectBoundary.class);
    }

    /**
     * Creates an instance of type ObjectBoundary.  Modifies the underlying ontology.
     */
    public ObjectBoundary createObjectBoundary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OBJECTBOUNDARY, DefaultObjectBoundary.class);
    }

    /**
     * Gets an instance of type ObjectBoundary with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ObjectBoundary getObjectBoundary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OBJECTBOUNDARY, DefaultObjectBoundary.class);
    }

    /**
     * Gets all instances of ObjectBoundary from the ontology.
     */
    public Collection<? extends ObjectBoundary> getAllObjectBoundaryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OBJECTBOUNDARY, DefaultObjectBoundary.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#OneDimensionalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#OneDimensionalRegion", OneDimensionalRegion.class, DefaultOneDimensionalRegion.class);
    }

    /**
     * Creates an instance of type OneDimensionalRegion.  Modifies the underlying ontology.
     */
    public OneDimensionalRegion createOneDimensionalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ONEDIMENSIONALREGION, DefaultOneDimensionalRegion.class);
    }

    /**
     * Gets an instance of type OneDimensionalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public OneDimensionalRegion getOneDimensionalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ONEDIMENSIONALREGION, DefaultOneDimensionalRegion.class);
    }

    /**
     * Gets all instances of OneDimensionalRegion from the ontology.
     */
    public Collection<? extends OneDimensionalRegion> getAllOneDimensionalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ONEDIMENSIONALREGION, DefaultOneDimensionalRegion.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Quality
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Quality", Quality.class, DefaultQuality.class);
    }

    /**
     * Creates an instance of type Quality.  Modifies the underlying ontology.
     */
    public Quality createQuality(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QUALITY, DefaultQuality.class);
    }

    /**
     * Gets an instance of type Quality with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Quality getQuality(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QUALITY, DefaultQuality.class);
    }

    /**
     * Gets all instances of Quality from the ontology.
     */
    public Collection<? extends Quality> getAllQualityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QUALITY, DefaultQuality.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#RealizableEntity
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#RealizableEntity", RealizableEntity.class, DefaultRealizableEntity.class);
    }

    /**
     * Creates an instance of type RealizableEntity.  Modifies the underlying ontology.
     */
    public RealizableEntity createRealizableEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REALIZABLEENTITY, DefaultRealizableEntity.class);
    }

    /**
     * Gets an instance of type RealizableEntity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RealizableEntity getRealizableEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REALIZABLEENTITY, DefaultRealizableEntity.class);
    }

    /**
     * Gets all instances of RealizableEntity from the ontology.
     */
    public Collection<? extends RealizableEntity> getAllRealizableEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REALIZABLEENTITY, DefaultRealizableEntity.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Role
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Role", Role.class, DefaultRole.class);
    }

    /**
     * Creates an instance of type Role.  Modifies the underlying ontology.
     */
    public Role createRole(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROLE, DefaultRole.class);
    }

    /**
     * Gets an instance of type Role with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Role getRole(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROLE, DefaultRole.class);
    }

    /**
     * Gets all instances of Role from the ontology.
     */
    public Collection<? extends Role> getAllRoleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROLE, DefaultRole.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#Site
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#Site", Site.class, DefaultSite.class);
    }

    /**
     * Creates an instance of type Site.  Modifies the underlying ontology.
     */
    public Site createSite(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SITE, DefaultSite.class);
    }

    /**
     * Gets an instance of type Site with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Site getSite(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SITE, DefaultSite.class);
    }

    /**
     * Gets all instances of Site from the ontology.
     */
    public Collection<? extends Site> getAllSiteInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SITE, DefaultSite.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#SpatialRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#SpatialRegion", SpatialRegion.class, DefaultSpatialRegion.class);
    }

    /**
     * Creates an instance of type SpatialRegion.  Modifies the underlying ontology.
     */
    public SpatialRegion createSpatialRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPATIALREGION, DefaultSpatialRegion.class);
    }

    /**
     * Gets an instance of type SpatialRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpatialRegion getSpatialRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPATIALREGION, DefaultSpatialRegion.class);
    }

    /**
     * Gets all instances of SpatialRegion from the ontology.
     */
    public Collection<? extends SpatialRegion> getAllSpatialRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPATIALREGION, DefaultSpatialRegion.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#SpecificallyDependentContinuant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#SpecificallyDependentContinuant", SpecificallyDependentContinuant.class, DefaultSpecificallyDependentContinuant.class);
    }

    /**
     * Creates an instance of type SpecificallyDependentContinuant.  Modifies the underlying ontology.
     */
    public SpecificallyDependentContinuant createSpecificallyDependentContinuant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIFICALLYDEPENDENTCONTINUANT, DefaultSpecificallyDependentContinuant.class);
    }

    /**
     * Gets an instance of type SpecificallyDependentContinuant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpecificallyDependentContinuant getSpecificallyDependentContinuant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIFICALLYDEPENDENTCONTINUANT, DefaultSpecificallyDependentContinuant.class);
    }

    /**
     * Gets all instances of SpecificallyDependentContinuant from the ontology.
     */
    public Collection<? extends SpecificallyDependentContinuant> getAllSpecificallyDependentContinuantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIFICALLYDEPENDENTCONTINUANT, DefaultSpecificallyDependentContinuant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#ThreeDimensionalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#ThreeDimensionalRegion", ThreeDimensionalRegion.class, DefaultThreeDimensionalRegion.class);
    }

    /**
     * Creates an instance of type ThreeDimensionalRegion.  Modifies the underlying ontology.
     */
    public ThreeDimensionalRegion createThreeDimensionalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_THREEDIMENSIONALREGION, DefaultThreeDimensionalRegion.class);
    }

    /**
     * Gets an instance of type ThreeDimensionalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ThreeDimensionalRegion getThreeDimensionalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_THREEDIMENSIONALREGION, DefaultThreeDimensionalRegion.class);
    }

    /**
     * Gets all instances of ThreeDimensionalRegion from the ontology.
     */
    public Collection<? extends ThreeDimensionalRegion> getAllThreeDimensionalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_THREEDIMENSIONALREGION, DefaultThreeDimensionalRegion.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#TwoDimensionalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#TwoDimensionalRegion", TwoDimensionalRegion.class, DefaultTwoDimensionalRegion.class);
    }

    /**
     * Creates an instance of type TwoDimensionalRegion.  Modifies the underlying ontology.
     */
    public TwoDimensionalRegion createTwoDimensionalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TWODIMENSIONALREGION, DefaultTwoDimensionalRegion.class);
    }

    /**
     * Gets an instance of type TwoDimensionalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TwoDimensionalRegion getTwoDimensionalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TWODIMENSIONALREGION, DefaultTwoDimensionalRegion.class);
    }

    /**
     * Gets all instances of TwoDimensionalRegion from the ontology.
     */
    public Collection<? extends TwoDimensionalRegion> getAllTwoDimensionalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TWODIMENSIONALREGION, DefaultTwoDimensionalRegion.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/snap#ZeroDimensionalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/snap#ZeroDimensionalRegion", ZeroDimensionalRegion.class, DefaultZeroDimensionalRegion.class);
    }

    /**
     * Creates an instance of type ZeroDimensionalRegion.  Modifies the underlying ontology.
     */
    public ZeroDimensionalRegion createZeroDimensionalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ZERODIMENSIONALREGION, DefaultZeroDimensionalRegion.class);
    }

    /**
     * Gets an instance of type ZeroDimensionalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ZeroDimensionalRegion getZeroDimensionalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ZERODIMENSIONALREGION, DefaultZeroDimensionalRegion.class);
    }

    /**
     * Gets all instances of ZeroDimensionalRegion from the ontology.
     */
    public Collection<? extends ZeroDimensionalRegion> getAllZeroDimensionalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ZERODIMENSIONALREGION, DefaultZeroDimensionalRegion.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ConnectedSpatiotemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ConnectedSpatiotemporalRegion", ConnectedSpatiotemporalRegion.class, DefaultConnectedSpatiotemporalRegion.class);
    }

    /**
     * Creates an instance of type ConnectedSpatiotemporalRegion.  Modifies the underlying ontology.
     */
    public ConnectedSpatiotemporalRegion createConnectedSpatiotemporalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONNECTEDSPATIOTEMPORALREGION, DefaultConnectedSpatiotemporalRegion.class);
    }

    /**
     * Gets an instance of type ConnectedSpatiotemporalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConnectedSpatiotemporalRegion getConnectedSpatiotemporalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONNECTEDSPATIOTEMPORALREGION, DefaultConnectedSpatiotemporalRegion.class);
    }

    /**
     * Gets all instances of ConnectedSpatiotemporalRegion from the ontology.
     */
    public Collection<? extends ConnectedSpatiotemporalRegion> getAllConnectedSpatiotemporalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONNECTEDSPATIOTEMPORALREGION, DefaultConnectedSpatiotemporalRegion.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ConnectedTemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ConnectedTemporalRegion", ConnectedTemporalRegion.class, DefaultConnectedTemporalRegion.class);
    }

    /**
     * Creates an instance of type ConnectedTemporalRegion.  Modifies the underlying ontology.
     */
    public ConnectedTemporalRegion createConnectedTemporalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONNECTEDTEMPORALREGION, DefaultConnectedTemporalRegion.class);
    }

    /**
     * Gets an instance of type ConnectedTemporalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConnectedTemporalRegion getConnectedTemporalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONNECTEDTEMPORALREGION, DefaultConnectedTemporalRegion.class);
    }

    /**
     * Gets all instances of ConnectedTemporalRegion from the ontology.
     */
    public Collection<? extends ConnectedTemporalRegion> getAllConnectedTemporalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONNECTEDTEMPORALREGION, DefaultConnectedTemporalRegion.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#FiatProcessPart
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#FiatProcessPart", FiatProcessPart.class, DefaultFiatProcessPart.class);
    }

    /**
     * Creates an instance of type FiatProcessPart.  Modifies the underlying ontology.
     */
    public FiatProcessPart createFiatProcessPart(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FIATPROCESSPART, DefaultFiatProcessPart.class);
    }

    /**
     * Gets an instance of type FiatProcessPart with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FiatProcessPart getFiatProcessPart(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FIATPROCESSPART, DefaultFiatProcessPart.class);
    }

    /**
     * Gets all instances of FiatProcessPart from the ontology.
     */
    public Collection<? extends FiatProcessPart> getAllFiatProcessPartInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FIATPROCESSPART, DefaultFiatProcessPart.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#Occurrent
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#Occurrent", Occurrent.class, DefaultOccurrent.class);
    }

    /**
     * Creates an instance of type Occurrent.  Modifies the underlying ontology.
     */
    public Occurrent createOccurrent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OCCURRENT, DefaultOccurrent.class);
    }

    /**
     * Gets an instance of type Occurrent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Occurrent getOccurrent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OCCURRENT, DefaultOccurrent.class);
    }

    /**
     * Gets all instances of Occurrent from the ontology.
     */
    public Collection<? extends Occurrent> getAllOccurrentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OCCURRENT, DefaultOccurrent.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#Process
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#Process", Process.class, DefaultProcess.class);
    }

    /**
     * Creates an instance of type Process.  Modifies the underlying ontology.
     */
    public Process createProcess(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESS, DefaultProcess.class);
    }

    /**
     * Gets an instance of type Process with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Process getProcess(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESS, DefaultProcess.class);
    }

    /**
     * Gets all instances of Process from the ontology.
     */
    public Collection<? extends Process> getAllProcessInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESS, DefaultProcess.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ProcessAggregate
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ProcessAggregate", ProcessAggregate.class, DefaultProcessAggregate.class);
    }

    /**
     * Creates an instance of type ProcessAggregate.  Modifies the underlying ontology.
     */
    public ProcessAggregate createProcessAggregate(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESSAGGREGATE, DefaultProcessAggregate.class);
    }

    /**
     * Gets an instance of type ProcessAggregate with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ProcessAggregate getProcessAggregate(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESSAGGREGATE, DefaultProcessAggregate.class);
    }

    /**
     * Gets all instances of ProcessAggregate from the ontology.
     */
    public Collection<? extends ProcessAggregate> getAllProcessAggregateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESSAGGREGATE, DefaultProcessAggregate.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ProcessBoundary
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ProcessBoundary", ProcessBoundary.class, DefaultProcessBoundary.class);
    }

    /**
     * Creates an instance of type ProcessBoundary.  Modifies the underlying ontology.
     */
    public ProcessBoundary createProcessBoundary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESSBOUNDARY, DefaultProcessBoundary.class);
    }

    /**
     * Gets an instance of type ProcessBoundary with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ProcessBoundary getProcessBoundary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESSBOUNDARY, DefaultProcessBoundary.class);
    }

    /**
     * Gets all instances of ProcessBoundary from the ontology.
     */
    public Collection<? extends ProcessBoundary> getAllProcessBoundaryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESSBOUNDARY, DefaultProcessBoundary.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ProcessualContext
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ProcessualContext", ProcessualContext.class, DefaultProcessualContext.class);
    }

    /**
     * Creates an instance of type ProcessualContext.  Modifies the underlying ontology.
     */
    public ProcessualContext createProcessualContext(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESSUALCONTEXT, DefaultProcessualContext.class);
    }

    /**
     * Gets an instance of type ProcessualContext with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ProcessualContext getProcessualContext(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESSUALCONTEXT, DefaultProcessualContext.class);
    }

    /**
     * Gets all instances of ProcessualContext from the ontology.
     */
    public Collection<? extends ProcessualContext> getAllProcessualContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESSUALCONTEXT, DefaultProcessualContext.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ProcessualEntity
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ProcessualEntity", ProcessualEntity.class, DefaultProcessualEntity.class);
    }

    /**
     * Creates an instance of type ProcessualEntity.  Modifies the underlying ontology.
     */
    public ProcessualEntity createProcessualEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROCESSUALENTITY, DefaultProcessualEntity.class);
    }

    /**
     * Gets an instance of type ProcessualEntity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ProcessualEntity getProcessualEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROCESSUALENTITY, DefaultProcessualEntity.class);
    }

    /**
     * Gets all instances of ProcessualEntity from the ontology.
     */
    public Collection<? extends ProcessualEntity> getAllProcessualEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROCESSUALENTITY, DefaultProcessualEntity.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ScatteredSpatiotemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ScatteredSpatiotemporalRegion", ScatteredSpatiotemporalRegion.class, DefaultScatteredSpatiotemporalRegion.class);
    }

    /**
     * Creates an instance of type ScatteredSpatiotemporalRegion.  Modifies the underlying ontology.
     */
    public ScatteredSpatiotemporalRegion createScatteredSpatiotemporalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCATTEREDSPATIOTEMPORALREGION, DefaultScatteredSpatiotemporalRegion.class);
    }

    /**
     * Gets an instance of type ScatteredSpatiotemporalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScatteredSpatiotemporalRegion getScatteredSpatiotemporalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCATTEREDSPATIOTEMPORALREGION, DefaultScatteredSpatiotemporalRegion.class);
    }

    /**
     * Gets all instances of ScatteredSpatiotemporalRegion from the ontology.
     */
    public Collection<? extends ScatteredSpatiotemporalRegion> getAllScatteredSpatiotemporalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCATTEREDSPATIOTEMPORALREGION, DefaultScatteredSpatiotemporalRegion.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#ScatteredTemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#ScatteredTemporalRegion", ScatteredTemporalRegion.class, DefaultScatteredTemporalRegion.class);
    }

    /**
     * Creates an instance of type ScatteredTemporalRegion.  Modifies the underlying ontology.
     */
    public ScatteredTemporalRegion createScatteredTemporalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCATTEREDTEMPORALREGION, DefaultScatteredTemporalRegion.class);
    }

    /**
     * Gets an instance of type ScatteredTemporalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScatteredTemporalRegion getScatteredTemporalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCATTEREDTEMPORALREGION, DefaultScatteredTemporalRegion.class);
    }

    /**
     * Gets all instances of ScatteredTemporalRegion from the ontology.
     */
    public Collection<? extends ScatteredTemporalRegion> getAllScatteredTemporalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCATTEREDTEMPORALREGION, DefaultScatteredTemporalRegion.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#SpatiotemporalInstant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#SpatiotemporalInstant", SpatiotemporalInstant.class, DefaultSpatiotemporalInstant.class);
    }

    /**
     * Creates an instance of type SpatiotemporalInstant.  Modifies the underlying ontology.
     */
    public SpatiotemporalInstant createSpatiotemporalInstant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORALINSTANT, DefaultSpatiotemporalInstant.class);
    }

    /**
     * Gets an instance of type SpatiotemporalInstant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpatiotemporalInstant getSpatiotemporalInstant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORALINSTANT, DefaultSpatiotemporalInstant.class);
    }

    /**
     * Gets all instances of SpatiotemporalInstant from the ontology.
     */
    public Collection<? extends SpatiotemporalInstant> getAllSpatiotemporalInstantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPATIOTEMPORALINSTANT, DefaultSpatiotemporalInstant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#SpatiotemporalInterval
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#SpatiotemporalInterval", SpatiotemporalInterval.class, DefaultSpatiotemporalInterval.class);
    }

    /**
     * Creates an instance of type SpatiotemporalInterval.  Modifies the underlying ontology.
     */
    public SpatiotemporalInterval createSpatiotemporalInterval(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORALINTERVAL, DefaultSpatiotemporalInterval.class);
    }

    /**
     * Gets an instance of type SpatiotemporalInterval with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpatiotemporalInterval getSpatiotemporalInterval(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORALINTERVAL, DefaultSpatiotemporalInterval.class);
    }

    /**
     * Gets all instances of SpatiotemporalInterval from the ontology.
     */
    public Collection<? extends SpatiotemporalInterval> getAllSpatiotemporalIntervalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPATIOTEMPORALINTERVAL, DefaultSpatiotemporalInterval.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#SpatiotemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#SpatiotemporalRegion", SpatiotemporalRegion.class, DefaultSpatiotemporalRegion.class);
    }

    /**
     * Creates an instance of type SpatiotemporalRegion.  Modifies the underlying ontology.
     */
    public SpatiotemporalRegion createSpatiotemporalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORALREGION, DefaultSpatiotemporalRegion.class);
    }

    /**
     * Gets an instance of type SpatiotemporalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpatiotemporalRegion getSpatiotemporalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPATIOTEMPORALREGION, DefaultSpatiotemporalRegion.class);
    }

    /**
     * Gets all instances of SpatiotemporalRegion from the ontology.
     */
    public Collection<? extends SpatiotemporalRegion> getAllSpatiotemporalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPATIOTEMPORALREGION, DefaultSpatiotemporalRegion.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#TemporalInstant
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#TemporalInstant", TemporalInstant.class, DefaultTemporalInstant.class);
    }

    /**
     * Creates an instance of type TemporalInstant.  Modifies the underlying ontology.
     */
    public TemporalInstant createTemporalInstant(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPORALINSTANT, DefaultTemporalInstant.class);
    }

    /**
     * Gets an instance of type TemporalInstant with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TemporalInstant getTemporalInstant(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPORALINSTANT, DefaultTemporalInstant.class);
    }

    /**
     * Gets all instances of TemporalInstant from the ontology.
     */
    public Collection<? extends TemporalInstant> getAllTemporalInstantInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPORALINSTANT, DefaultTemporalInstant.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#TemporalInterval
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#TemporalInterval", TemporalInterval.class, DefaultTemporalInterval.class);
    }

    /**
     * Creates an instance of type TemporalInterval.  Modifies the underlying ontology.
     */
    public TemporalInterval createTemporalInterval(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPORALINTERVAL, DefaultTemporalInterval.class);
    }

    /**
     * Gets an instance of type TemporalInterval with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TemporalInterval getTemporalInterval(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPORALINTERVAL, DefaultTemporalInterval.class);
    }

    /**
     * Gets all instances of TemporalInterval from the ontology.
     */
    public Collection<? extends TemporalInterval> getAllTemporalIntervalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPORALINTERVAL, DefaultTemporalInterval.class);
    }


    /* ***************************************************
     * Class http://www.ifomis.org/bfo/1.1/span#TemporalRegion
     */

    {
        javaMapping.add("http://www.ifomis.org/bfo/1.1/span#TemporalRegion", TemporalRegion.class, DefaultTemporalRegion.class);
    }

    /**
     * Creates an instance of type TemporalRegion.  Modifies the underlying ontology.
     */
    public TemporalRegion createTemporalRegion(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPORALREGION, DefaultTemporalRegion.class);
    }

    /**
     * Gets an instance of type TemporalRegion with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TemporalRegion getTemporalRegion(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPORALREGION, DefaultTemporalRegion.class);
    }

    /**
     * Gets all instances of TemporalRegion from the ontology.
     */
    public Collection<? extends TemporalRegion> getAllTemporalRegionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPORALREGION, DefaultTemporalRegion.class);
    }


}
